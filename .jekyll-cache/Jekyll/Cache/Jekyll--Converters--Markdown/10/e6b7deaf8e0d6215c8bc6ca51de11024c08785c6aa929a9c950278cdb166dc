I"!5<p>Port forwarding over ssh is a great feature of ssh (a.k.a ssh tunnels). It provide you extra layer of security and accessibility. I happen to use this feature a lot especially the remote ssh port forwarding (a.k.a reverse ssh tunnels). I administer many Linux based systems that don’t have any kind of direct access from internet and reverse ssh tunnels come in real handy for accessing these systems remotely. The idea is that I forward the ssh port from these systems to a random remote port on my Linux server (that has a live static IP). So whenever I need to access these systems, I login to my Linux server and ssh to these forwarded ssh ports. (If you don’t know how ssh tunnels or port forwarding work have a look at this great article explaining the topic in great detail)</p>

<p>I have written a bash script to manage these remote tunnels. Using this script you can easily forward as many ports as you want to a remote server. It will handle the ssh based reverse tunnel sessions and try its best to retain them. It is easily deployable and configurable. Here is how to use this script:</p>

<h3 id="1--get-the-script-on-the-source-system">1- Get the script on the source system</h3>

<p>This will be run on the system from which you want to create the tunnel to your server. We will clone it from git in a temporary location, copy the script to /opt and make it executeable.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /tmp/
git clone https://github.com/kxr/rssht.git
mv /tmp/rssht/rssht /opt/rssht
chmod +x /opt/rssht
</code></pre></div></div>

<p>Note: You can put this script where ever you want and rename this script to whatever you want; Just make sure that it can be excecuted by the user you are planning to run it as.</p>

<h3 id="2--edit-the-script-and-set-the-hostport-configuration-variables">2- Edit the script and set the host/port configuration variables:</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>REMOTE_HOST=live.host.com   # The remote host to which you want to forward the ports

REMOTE_SSH_PORT=22          # SSH port of the remote host

REMOTE_USER=root            # SSH user on the remote host
</code></pre></div></div>

<p>Note: There are other advance configuration options as well. Check the script for more details.</p>

<h3 id="3--set-the-ports-to-forward-via-the-tunnel">3- Set the ports to forward via the tunnel:</h3>

<p>This is the list of ports forwarding, and the format is exactly what you would use in ssh command after the -R switch. This variable is an array and you can have as many values (forwardings) as you want. Suppose you want port 22 (ssh) and port 80 (http) on this system to be forwarded to port 10122 and 10180 respectively on the remote server, then this variable will look something like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>REMOTE_FWDS=(   

10122:localhost:22

10180:localhost:80

)
</code></pre></div></div>

<h3 id="4--setup-password-less-login-from-this-machine-to-the-remote-server">4- Setup password less login from this machine to the remote server:</h3>

<p>Yes, this script expects a password-less ssh connection to the remote host (if you want to enter password every time, you don’t need this script, run the ssh command manually).</p>

<p>Running the script with –help or install as first argument will give you quick instructions (based on the configuration variables you set) on how to setup the password-less ssh login to the remote server and add the script to cron job when required.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[root@host ~]# /opt/rssht install
INSTALLATION INSTRUCTIONS:

# Set the configuration variables and forwardings

# Make sure you have ssh keys generated
ssh-keygen

# Setup password-less login to the remote host
ssh-copy-id 'live.host.com -l root -p 22'

# Add the cron job
echo '*/5 * * * * root /opt/rssht' &gt; /etc/cron.d/rssht_live.host.com
</code></pre></div></div>

<h3 id="5--run-the-script">5- Run the script:</h3>

<p>Once the password less login is setup, simply run the script. It should give you a success message with the pid of the ssh session:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[root@host ~]# /opt/rssht
RSSHT to host root@live.host.com:22  started successfully ssh pid: 12779
</code></pre></div></div>

<p>Once the reverse tunnel is started, running the script again should check the status of the running session:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[root@host ~]# /opt/rssht
ssh connection is fine, exiting
[root@host ~]# /opt/rssht
ssh connection is fine, exiting
</code></pre></div></div>

<p>You can pass the stop argument if you want to kill the session and remove the tunnel:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[root@hplt ~]# /opt/rssht stop
Stop argument passed, killing ..
</code></pre></div></div>

<p>Alternatively, if you want the tunnel to be permanent, you can add the cron entry for this script. Running the script with the “install” argument will give you a quick command to enable cron job to run this script every 5 minutes:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo '*/5 * * * * root /opt/rssht_1' &amp;gt; /etc/cron.d/rssht_live.host.com
</code></pre></div></div>

<blockquote>
  <p>QUICK TIP: When using the script in persistent/cron mode, there is a configuration variable in the script called REFRESH_SOCKET. You can set it to a non-zero positive number and the script will reset (exit and reconnect) the ssh socket connection if its that many minutes old. For example, if this variable is set to 60, the script will reset the connection ever hour. This could be very useful if the connection is unstable and gets stuck a lot. To disable this feature set the variable to 0.</p>
</blockquote>

<p>Each script file has the ability to create tunnel to only one remote server. If you want to create tunnels to more than one server, you can have multiple copies of this script each with its own configuration ( and with different file names e.g: /opt/rssht_2).</p>

<p>Here is the complete script code:</p>

<noscript><pre>#!/bin/bash
# Script: rssht (Reverse SSH Tunnel)
# Author: Khizer Naeem (khizernaeem(x)gmail.com)
# Created : 09 Sep 2012
# Version: 1.02
# Latest Revision: 11 Sep 2012
# Tested on: Centos/RHEL 6, Centos/RHEL 5,  
# Description:	A bash script to maintain reverse ssh tunnel with remote port forwardings.
#
# Copyright (C) 2012 Khizer Naeem All rights reserved.
# This copyrighted material is made available to anyone wishing to use,
# modify, copy, or redistribute it subject to the terms and conditions
# of the GNU General Public License v.2.
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#############################
## CONFIGURATION VARIABLES ##
#############################

REMOTE_HOST=rhevm.khizer.local				# The remote host to which you want to forward the ports
REMOTE_SSH_PORT=22				# SSH port of the remote host
REMOTE_USER=root				# SSH user for the remote host (Should have password less login from this machine with this user)
SSH_RUN_DIR=/var/run/rssht/		# Directory to keep ssh socket connection and pid file (Should exist)
PORTS_REMOTELY_ACCESSIBLE=yes		# If set to yes, -g switch will be used while making the ssh connection. Read ssh manual for detail of -g
SSH_BIN=/usr/bin/ssh				# Location of the ssh client on this host
REFRESH_SOCKET=10					# If set to a non-zero integer, this script will restart the ssh session if its that many minutes old.

###########################
## PORT FORWARDING TABLE ##
###########################
REMOTE_FWDS=(	
				58531:localhost:22
				58532:localhost:5900
				58533:localhost:80
				58534:locahost:3306
			)

#######################
## SSH OPTIONS TABLE ##
#######################
# These options will be passed to ssh with the -o switch e.g -o &quot;ControlMaster yes&quot;
# You can comment this out if you want the script to obey the ssh config
SSH_OPTS=(		
				&#39;ControlMaster yes&#39;
				&#39;PreferredAuthentications publickey&#39;
				&#39;Ciphers arcfour256&#39;
				&#39;Compression yes&#39;
				&#39;TCPKeepAlive yes&#39;
				&#39;ServerAliveCountMax 3&#39;
				&#39;ServerAliveInterval 10&#39;
		)

#			/////////////////////////
#			// Do not modify below //
#			/////////////////////////

###################
## SCRIPT CHECKS ##
###################

if [ &quot;$1&quot; == &quot;install&quot; -o &quot;$1&quot; == &quot;--help&quot; -o &quot;$1&quot; == &quot;-h&quot; ]
then
	echo &quot;INSTALLATION INSTRUCTIONS:&quot;
	echo
	echo &quot;# Set the configuration variables and forwardings&quot;
	echo
	echo &quot;# Make sure you have ssh keys generated&quot;
	echo &quot;ssh-keygen&quot;
	echo
	echo &quot;# Setup password-less login to the remote host&quot;
	echo &quot;ssh-copy-id &#39;$REMOTE_HOST -l $REMOTE_USER -p $REMOTE_SSH_PORT&#39;&quot;
	echo
	echo &quot;# Add the cron job&quot;
	echo &quot;echo &#39;*/5 * * * * root $( cd &quot;$( dirname &quot;${BASH_SOURCE[0]}&quot; )&quot; &amp;&amp; pwd )/rssht&#39; &gt; /etc/cron.d/rssht&quot;
	exit 0
fi


###############################
## SSH CONNECTION EVALUATION ##
###############################

#	If socket exists:
# 		1-If the socket is old kill the connection (so that a new one is created)
# 		2-Run the check command on the socket
#		 	2.1- if it passes, do nothing, exit
# 			2.2- if it fails kill ssh and remove socket file

# Socket file
SOCK_FILE=&quot;$SSH_RUN_DIR/$REMOTE_HOST.sock&quot;
# PID file
PID_FILE=&quot;$SSH_RUN_DIR/ssh_$REMOTE_HOST.pid&quot;

if (mkdir -p $SSH_RUN_DIR)
then :
else
	echo &quot;FATAL Error: Cannot create RUN directory $SSH_RUN_DIR/&quot;
fi

if [ -S &quot;$SOCK_FILE&quot; -o &quot;$1&quot; == &quot;stop&quot; ]
then
	# If Socket is older than {REFRESH_SOCKET} minutes OR if stop argument is passed, stop the connection
	if [ &quot;$REFRESH_SOCKET&quot; -gt &quot;0&quot; -o &quot;$1&quot; == &quot;stop&quot; ]
	then
		if [ -n &quot;$(find $SOCK_FILE -mmin +$REFRESH_SOCKET)&quot; -o &quot;$1&quot; == &quot;stop&quot; ]
		then
			if [ &quot;$1&quot; == &quot;stop&quot; ]
			then
				echo &quot;Stop argument passed, killing ..&quot;
			else
				echo &quot;Existing SSH connection is old, killing ..&quot;
			fi
			# Send the exit command to the existing socket
			ssh -O exit -S $SOCK_FILE $REMOTE_HOST &amp;&gt; /dev/null
			# Kill the pid if the process some how still exists
			if (kill -0 $(cat $PID_FILE) &amp;&gt; /dev/null )
			then
				echo &quot;killing ssh process $(cat $PID_FILE)&quot;
				kill -9 $(cat $PID_FILE) &amp;&gt; /dev/null
			fi
			rm -rf $PID_FILE &amp;&gt; /dev/null
		fi
	fi
	#If the user passed stop, don&#39;t proceed further
	[ &quot;$1&quot; == &quot;stop&quot; ] &amp;&amp; exit 0
	
	# Check the status of the SSH connection through the socket file
	if (ssh -O check -S $SOCK_FILE $REMOTE_HOST &amp;&gt; /dev/null)
	then
		# SSH connection is fine
		echo &quot;ssh connection is fine, exiting&quot;
		exit 0
	else
		# SSH socket check failed
		# Try killing the PID first
		if [ -e &quot;$PID_FILE&quot; ]
		then
			if (kill -0 $(cat $PID_FILE) &amp;&gt; /dev/null )
			then
				echo &quot;killing ssh process $(cat $PID_FILE)&quot;
				kill -9 $(cat $PID_FILE) &amp;&gt; /dev/null
				rm -rf $PID_FILE &amp;&gt; /dev/null
			fi
		fi
		# Remove the socket if it still exists
		if [ -S &quot;$SOCK_FILE&quot; ]
		then
			if (rm -rf &quot;$SOCK_FILE&quot; &amp;&gt; /dev/null)
			then
				echo &quot;FATAL ERROR: Cannot remove stalled socket file $SOCK_FILE&quot;
				echo &quot;Exiting..&quot;
				exit 9
			else
				echo &quot;Stalled socket file removed&quot;
			fi
		fi
	fi
fi

# The socket and process should be gone by now; If not this is an exception; exit!
# This should not happen
if [ -S &quot;$SOCK_FILE&quot; ]
then
	echo &quot;Exception: Cannot remove socket file. SSH connection seems to be stuck&quot;
	echo &quot;Exiting&quot;
	exit 11
fi

##########################
## SSH COMMAND CREATION ##
##########################

# Whether to use -g switch or not
P_R_A=&quot;&quot;
[ &quot;$PORTS_REMOTELY_ACCESSIBLE&quot; == &quot;yes&quot; ] &amp;&amp; P_R_A=&quot;-g&quot;

# Remote forwardings
RFWDS=&quot;&quot;
for i in &quot;${!REMOTE_FWDS[@]}&quot;
do
		RFWDS=&quot;$RFWDS-R ${REMOTE_FWDS[$i]} &quot;
done

# SSH options
SOPTS=&quot;&quot;
for i in &quot;${!SSH_OPTS[@]}&quot;
do
		SOPTS=&quot;$SOPTS-o &#39;${SSH_OPTS[$i]}&#39; &quot;
done

# SSH final command
SSH_COMMAND=&quot;$SSH_BIN $SOPTS $P_R_A -f -q -N -S $SOCK_FILE $RFWDS -p $REMOTE_SSH_PORT -l $REMOTE_USER $REMOTE_HOST&quot;

#####################
## RUN SSH COMMAND ##
#####################

eval &quot;$SSH_COMMAND&quot;
	if [ &quot;$?&quot; -ne &quot;0&quot; ]
	then
		echo &quot;FATAL ERROR: SSH command failed&quot;
		echo &quot;SSH_COMMAND=$SSH_COMMAND&quot;
		exit 10
	else
	#Save the PID
		SOCK_CHECK=$(ssh -O check -S $SOCK_FILE $REMOTE_HOST 2&gt;&amp;1)
		SPID=$(echo $SOCK_CHECK | cut -d&#39;=&#39; -f2 | sed &#39;s/)//&#39;)
		echo &quot;$SPID&quot; &gt; $PID_FILE
		echo &quot;RSSHT started successfully ssh pid: $SPID&quot;
		exit 0
	fi</pre></noscript>
<script src="https://gist.github.com/kxr/b0f1f6b63fef7f20c4f3a225c54366f1.js"> </script>

:ET